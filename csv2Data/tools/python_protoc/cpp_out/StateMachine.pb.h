// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateMachine.proto

#ifndef PROTOBUF_StateMachine_2eproto__INCLUDED
#define PROTOBUF_StateMachine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dbc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_StateMachine_2eproto();
void protobuf_AssignDesc_StateMachine_2eproto();
void protobuf_ShutdownFile_StateMachine_2eproto();

class StateMachineTable;
class StateMachine;

// ===================================================================

class StateMachineTable : public ::google::protobuf::Message {
 public:
  StateMachineTable();
  virtual ~StateMachineTable();

  StateMachineTable(const StateMachineTable& from);

  inline StateMachineTable& operator=(const StateMachineTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachineTable& default_instance();

  void Swap(StateMachineTable* other);

  // implements Message ----------------------------------------------

  StateMachineTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachineTable& from);
  void MergeFrom(const StateMachineTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tname = 1;
  inline bool has_tname() const;
  inline void clear_tname();
  static const int kTnameFieldNumber = 1;
  inline const ::std::string& tname() const;
  inline void set_tname(const ::std::string& value);
  inline void set_tname(const char* value);
  inline void set_tname(const char* value, size_t size);
  inline ::std::string* mutable_tname();
  inline ::std::string* release_tname();
  inline void set_allocated_tname(::std::string* tname);

  // repeated .dbc.StateMachine tlist = 2;
  inline int tlist_size() const;
  inline void clear_tlist();
  static const int kTlistFieldNumber = 2;
  inline const ::dbc::StateMachine& tlist(int index) const;
  inline ::dbc::StateMachine* mutable_tlist(int index);
  inline ::dbc::StateMachine* add_tlist();
  inline const ::google::protobuf::RepeatedPtrField< ::dbc::StateMachine >&
      tlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::dbc::StateMachine >*
      mutable_tlist();

  // @@protoc_insertion_point(class_scope:dbc.StateMachineTable)
 private:
  inline void set_has_tname();
  inline void clear_has_tname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tname_;
  ::google::protobuf::RepeatedPtrField< ::dbc::StateMachine > tlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_StateMachine_2eproto();
  friend void protobuf_AssignDesc_StateMachine_2eproto();
  friend void protobuf_ShutdownFile_StateMachine_2eproto();

  void InitAsDefaultInstance();
  static StateMachineTable* default_instance_;
};
// -------------------------------------------------------------------

class StateMachine : public ::google::protobuf::Message {
 public:
  StateMachine();
  virtual ~StateMachine();

  StateMachine(const StateMachine& from);

  inline StateMachine& operator=(const StateMachine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StateMachine& default_instance();

  void Swap(StateMachine* other);

  // implements Message ----------------------------------------------

  StateMachine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StateMachine& from);
  void MergeFrom(const StateMachine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string Desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional string Skill = 4;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 4;
  inline const ::std::string& skill() const;
  inline void set_skill(const ::std::string& value);
  inline void set_skill(const char* value);
  inline void set_skill(const char* value, size_t size);
  inline ::std::string* mutable_skill();
  inline ::std::string* release_skill();
  inline void set_allocated_skill(::std::string* skill);

  // optional string PreSkill = 5;
  inline bool has_preskill() const;
  inline void clear_preskill();
  static const int kPreSkillFieldNumber = 5;
  inline const ::std::string& preskill() const;
  inline void set_preskill(const ::std::string& value);
  inline void set_preskill(const char* value);
  inline void set_preskill(const char* value, size_t size);
  inline ::std::string* mutable_preskill();
  inline ::std::string* release_preskill();
  inline void set_allocated_preskill(::std::string* preskill);

  // optional int32 EquipmentId = 6;
  inline bool has_equipmentid() const;
  inline void clear_equipmentid();
  static const int kEquipmentIdFieldNumber = 6;
  inline ::google::protobuf::int32 equipmentid() const;
  inline void set_equipmentid(::google::protobuf::int32 value);

  // optional string Skin = 7;
  inline bool has_skin() const;
  inline void clear_skin();
  static const int kSkinFieldNumber = 7;
  inline const ::std::string& skin() const;
  inline void set_skin(const ::std::string& value);
  inline void set_skin(const char* value);
  inline void set_skin(const char* value, size_t size);
  inline ::std::string* mutable_skin();
  inline ::std::string* release_skin();
  inline void set_allocated_skin(::std::string* skin);

  // @@protoc_insertion_point(class_scope:dbc.StateMachine)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_preskill();
  inline void clear_has_preskill();
  inline void set_has_equipmentid();
  inline void clear_has_equipmentid();
  inline void set_has_skin();
  inline void clear_has_skin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* desc_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 equipmentid_;
  ::std::string* skill_;
  ::std::string* preskill_;
  ::std::string* skin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_StateMachine_2eproto();
  friend void protobuf_AssignDesc_StateMachine_2eproto();
  friend void protobuf_ShutdownFile_StateMachine_2eproto();

  void InitAsDefaultInstance();
  static StateMachine* default_instance_;
};
// ===================================================================


// ===================================================================

// StateMachineTable

// optional string tname = 1;
inline bool StateMachineTable::has_tname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateMachineTable::set_has_tname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateMachineTable::clear_has_tname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateMachineTable::clear_tname() {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    tname_->clear();
  }
  clear_has_tname();
}
inline const ::std::string& StateMachineTable::tname() const {
  return *tname_;
}
inline void StateMachineTable::set_tname(const ::std::string& value) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(value);
}
inline void StateMachineTable::set_tname(const char* value) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(value);
}
inline void StateMachineTable::set_tname(const char* value, size_t size) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateMachineTable::mutable_tname() {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  return tname_;
}
inline ::std::string* StateMachineTable::release_tname() {
  clear_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tname_;
    tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateMachineTable::set_allocated_tname(::std::string* tname) {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    delete tname_;
  }
  if (tname) {
    set_has_tname();
    tname_ = tname;
  } else {
    clear_has_tname();
    tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .dbc.StateMachine tlist = 2;
inline int StateMachineTable::tlist_size() const {
  return tlist_.size();
}
inline void StateMachineTable::clear_tlist() {
  tlist_.Clear();
}
inline const ::dbc::StateMachine& StateMachineTable::tlist(int index) const {
  return tlist_.Get(index);
}
inline ::dbc::StateMachine* StateMachineTable::mutable_tlist(int index) {
  return tlist_.Mutable(index);
}
inline ::dbc::StateMachine* StateMachineTable::add_tlist() {
  return tlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dbc::StateMachine >&
StateMachineTable::tlist() const {
  return tlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::dbc::StateMachine >*
StateMachineTable::mutable_tlist() {
  return &tlist_;
}

// -------------------------------------------------------------------

// StateMachine

// optional int32 ID = 1;
inline bool StateMachine::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StateMachine::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StateMachine::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StateMachine::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 StateMachine::id() const {
  return id_;
}
inline void StateMachine::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string Name = 2;
inline bool StateMachine::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StateMachine::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StateMachine::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StateMachine::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& StateMachine::name() const {
  return *name_;
}
inline void StateMachine::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StateMachine::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void StateMachine::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateMachine::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* StateMachine::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateMachine::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Desc = 3;
inline bool StateMachine::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StateMachine::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StateMachine::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StateMachine::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& StateMachine::desc() const {
  return *desc_;
}
inline void StateMachine::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void StateMachine::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void StateMachine::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateMachine::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* StateMachine::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateMachine::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string Skill = 4;
inline bool StateMachine::has_skill() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StateMachine::set_has_skill() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StateMachine::clear_has_skill() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StateMachine::clear_skill() {
  if (skill_ != &::google::protobuf::internal::kEmptyString) {
    skill_->clear();
  }
  clear_has_skill();
}
inline const ::std::string& StateMachine::skill() const {
  return *skill_;
}
inline void StateMachine::set_skill(const ::std::string& value) {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  skill_->assign(value);
}
inline void StateMachine::set_skill(const char* value) {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  skill_->assign(value);
}
inline void StateMachine::set_skill(const char* value, size_t size) {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  skill_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateMachine::mutable_skill() {
  set_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    skill_ = new ::std::string;
  }
  return skill_;
}
inline ::std::string* StateMachine::release_skill() {
  clear_has_skill();
  if (skill_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skill_;
    skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateMachine::set_allocated_skill(::std::string* skill) {
  if (skill_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_;
  }
  if (skill) {
    set_has_skill();
    skill_ = skill;
  } else {
    clear_has_skill();
    skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string PreSkill = 5;
inline bool StateMachine::has_preskill() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StateMachine::set_has_preskill() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StateMachine::clear_has_preskill() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StateMachine::clear_preskill() {
  if (preskill_ != &::google::protobuf::internal::kEmptyString) {
    preskill_->clear();
  }
  clear_has_preskill();
}
inline const ::std::string& StateMachine::preskill() const {
  return *preskill_;
}
inline void StateMachine::set_preskill(const ::std::string& value) {
  set_has_preskill();
  if (preskill_ == &::google::protobuf::internal::kEmptyString) {
    preskill_ = new ::std::string;
  }
  preskill_->assign(value);
}
inline void StateMachine::set_preskill(const char* value) {
  set_has_preskill();
  if (preskill_ == &::google::protobuf::internal::kEmptyString) {
    preskill_ = new ::std::string;
  }
  preskill_->assign(value);
}
inline void StateMachine::set_preskill(const char* value, size_t size) {
  set_has_preskill();
  if (preskill_ == &::google::protobuf::internal::kEmptyString) {
    preskill_ = new ::std::string;
  }
  preskill_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateMachine::mutable_preskill() {
  set_has_preskill();
  if (preskill_ == &::google::protobuf::internal::kEmptyString) {
    preskill_ = new ::std::string;
  }
  return preskill_;
}
inline ::std::string* StateMachine::release_preskill() {
  clear_has_preskill();
  if (preskill_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = preskill_;
    preskill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateMachine::set_allocated_preskill(::std::string* preskill) {
  if (preskill_ != &::google::protobuf::internal::kEmptyString) {
    delete preskill_;
  }
  if (preskill) {
    set_has_preskill();
    preskill_ = preskill;
  } else {
    clear_has_preskill();
    preskill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 EquipmentId = 6;
inline bool StateMachine::has_equipmentid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StateMachine::set_has_equipmentid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StateMachine::clear_has_equipmentid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StateMachine::clear_equipmentid() {
  equipmentid_ = 0;
  clear_has_equipmentid();
}
inline ::google::protobuf::int32 StateMachine::equipmentid() const {
  return equipmentid_;
}
inline void StateMachine::set_equipmentid(::google::protobuf::int32 value) {
  set_has_equipmentid();
  equipmentid_ = value;
}

// optional string Skin = 7;
inline bool StateMachine::has_skin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StateMachine::set_has_skin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StateMachine::clear_has_skin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StateMachine::clear_skin() {
  if (skin_ != &::google::protobuf::internal::kEmptyString) {
    skin_->clear();
  }
  clear_has_skin();
}
inline const ::std::string& StateMachine::skin() const {
  return *skin_;
}
inline void StateMachine::set_skin(const ::std::string& value) {
  set_has_skin();
  if (skin_ == &::google::protobuf::internal::kEmptyString) {
    skin_ = new ::std::string;
  }
  skin_->assign(value);
}
inline void StateMachine::set_skin(const char* value) {
  set_has_skin();
  if (skin_ == &::google::protobuf::internal::kEmptyString) {
    skin_ = new ::std::string;
  }
  skin_->assign(value);
}
inline void StateMachine::set_skin(const char* value, size_t size) {
  set_has_skin();
  if (skin_ == &::google::protobuf::internal::kEmptyString) {
    skin_ = new ::std::string;
  }
  skin_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StateMachine::mutable_skin() {
  set_has_skin();
  if (skin_ == &::google::protobuf::internal::kEmptyString) {
    skin_ = new ::std::string;
  }
  return skin_;
}
inline ::std::string* StateMachine::release_skin() {
  clear_has_skin();
  if (skin_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = skin_;
    skin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void StateMachine::set_allocated_skin(::std::string* skin) {
  if (skin_ != &::google::protobuf::internal::kEmptyString) {
    delete skin_;
  }
  if (skin) {
    set_has_skin();
    skin_ = skin;
  } else {
    clear_has_skin();
    skin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StateMachine_2eproto__INCLUDED
