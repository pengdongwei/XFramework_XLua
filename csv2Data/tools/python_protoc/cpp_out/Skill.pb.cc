// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Skill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Skill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dbc {

namespace {

const ::google::protobuf::Descriptor* SkillTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Skill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Skill_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Skill_2eproto() {
  protobuf_AddDesc_Skill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Skill.proto");
  GOOGLE_CHECK(file != NULL);
  SkillTable_descriptor_ = file->message_type(0);
  static const int SkillTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTable, tname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTable, tlist_),
  };
  SkillTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillTable_descriptor_,
      SkillTable::default_instance_,
      SkillTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillTable));
  Skill_descriptor_ = file->message_type(1);
  static const int Skill_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, skillvalueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, actfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, soundpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, damagepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, jointpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, beatpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, camerapoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, efffile1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, effpoint1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, efffile2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, effpoint2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, efffile3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, effpoint3_),
  };
  Skill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Skill_descriptor_,
      Skill::default_instance_,
      Skill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Skill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Skill));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Skill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillTable_descriptor_, &SkillTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Skill_descriptor_, &Skill::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Skill_2eproto() {
  delete SkillTable::default_instance_;
  delete SkillTable_reflection_;
  delete Skill::default_instance_;
  delete Skill_reflection_;
}

void protobuf_AddDesc_Skill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Skill.proto\022\003dbc\"6\n\nSkillTable\022\r\n\005tnam"
    "e\030\001 \001(\t\022\031\n\005tlist\030\002 \003(\0132\n.dbc.Skill\"\252\002\n\005S"
    "kill\022\n\n\002ID\030\001 \001(\005\022\014\n\004Name\030\002 \001(\t\022\014\n\004Desc\030\003"
    " \001(\t\022\024\n\014SkillValueID\030\004 \001(\005\022\017\n\007ActFile\030\005 "
    "\001(\t\022\022\n\nSoundPoint\030\006 \001(\t\022\023\n\013DamagePoint\030\007"
    " \001(\t\022\022\n\nJointPoint\030\010 \001(\t\022\021\n\tBeatPoint\030\t "
    "\001(\t\022\023\n\013CameraPoint\030\n \001(\t\022\020\n\010EffFile1\030\013 \001"
    "(\t\022\021\n\tEffPoint1\030\014 \001(\t\022\020\n\010EffFile2\030\r \001(\t\022"
    "\021\n\tEffPoint2\030\016 \001(\t\022\020\n\010EffFile3\030\017 \001(\t\022\021\n\t"
    "EffPoint3\030\020 \001(\t", 375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Skill.proto", &protobuf_RegisterTypes);
  SkillTable::default_instance_ = new SkillTable();
  Skill::default_instance_ = new Skill();
  SkillTable::default_instance_->InitAsDefaultInstance();
  Skill::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Skill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Skill_2eproto {
  StaticDescriptorInitializer_Skill_2eproto() {
    protobuf_AddDesc_Skill_2eproto();
  }
} static_descriptor_initializer_Skill_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SkillTable::kTnameFieldNumber;
const int SkillTable::kTlistFieldNumber;
#endif  // !_MSC_VER

SkillTable::SkillTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillTable::InitAsDefaultInstance() {
}

SkillTable::SkillTable(const SkillTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillTable::SharedCtor() {
  _cached_size_ = 0;
  tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillTable::~SkillTable() {
  SharedDtor();
}

void SkillTable::SharedDtor() {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    delete tname_;
  }
  if (this != default_instance_) {
  }
}

void SkillTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTable_descriptor_;
}

const SkillTable& SkillTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

SkillTable* SkillTable::default_instance_ = NULL;

SkillTable* SkillTable::New() const {
  return new SkillTable;
}

void SkillTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tname()) {
      if (tname_ != &::google::protobuf::internal::kEmptyString) {
        tname_->clear();
      }
    }
  }
  tlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tname().data(), this->tname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tlist;
        break;
      }

      // repeated .dbc.Skill tlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tname = 1;
  if (has_tname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tname().data(), this->tname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tname(), output);
  }

  // repeated .dbc.Skill tlist = 2;
  for (int i = 0; i < this->tlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tname = 1;
  if (has_tname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tname().data(), this->tname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tname(), target);
  }

  // repeated .dbc.Skill tlist = 2;
  for (int i = 0; i < this->tlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tname = 1;
    if (has_tname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tname());
    }

  }
  // repeated .dbc.Skill tlist = 2;
  total_size += 1 * this->tlist_size();
  for (int i = 0; i < this->tlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillTable::MergeFrom(const SkillTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  tlist_.MergeFrom(from.tlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tname()) {
      set_tname(from.tname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillTable::CopyFrom(const SkillTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillTable::IsInitialized() const {

  return true;
}

void SkillTable::Swap(SkillTable* other) {
  if (other != this) {
    std::swap(tname_, other->tname_);
    tlist_.Swap(&other->tlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillTable_descriptor_;
  metadata.reflection = SkillTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Skill::kIDFieldNumber;
const int Skill::kNameFieldNumber;
const int Skill::kDescFieldNumber;
const int Skill::kSkillValueIDFieldNumber;
const int Skill::kActFileFieldNumber;
const int Skill::kSoundPointFieldNumber;
const int Skill::kDamagePointFieldNumber;
const int Skill::kJointPointFieldNumber;
const int Skill::kBeatPointFieldNumber;
const int Skill::kCameraPointFieldNumber;
const int Skill::kEffFile1FieldNumber;
const int Skill::kEffPoint1FieldNumber;
const int Skill::kEffFile2FieldNumber;
const int Skill::kEffPoint2FieldNumber;
const int Skill::kEffFile3FieldNumber;
const int Skill::kEffPoint3FieldNumber;
#endif  // !_MSC_VER

Skill::Skill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Skill::InitAsDefaultInstance() {
}

Skill::Skill(const Skill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Skill::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skillvalueid_ = 0;
  actfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  soundpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  damagepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jointpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beatpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  camerapoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  efffile1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effpoint1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  efffile2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effpoint2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  efffile3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effpoint3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Skill::~Skill() {
  SharedDtor();
}

void Skill::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (actfile_ != &::google::protobuf::internal::kEmptyString) {
    delete actfile_;
  }
  if (soundpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete soundpoint_;
  }
  if (damagepoint_ != &::google::protobuf::internal::kEmptyString) {
    delete damagepoint_;
  }
  if (jointpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete jointpoint_;
  }
  if (beatpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete beatpoint_;
  }
  if (camerapoint_ != &::google::protobuf::internal::kEmptyString) {
    delete camerapoint_;
  }
  if (efffile1_ != &::google::protobuf::internal::kEmptyString) {
    delete efffile1_;
  }
  if (effpoint1_ != &::google::protobuf::internal::kEmptyString) {
    delete effpoint1_;
  }
  if (efffile2_ != &::google::protobuf::internal::kEmptyString) {
    delete efffile2_;
  }
  if (effpoint2_ != &::google::protobuf::internal::kEmptyString) {
    delete effpoint2_;
  }
  if (efffile3_ != &::google::protobuf::internal::kEmptyString) {
    delete efffile3_;
  }
  if (effpoint3_ != &::google::protobuf::internal::kEmptyString) {
    delete effpoint3_;
  }
  if (this != default_instance_) {
  }
}

void Skill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Skill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Skill_descriptor_;
}

const Skill& Skill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Skill_2eproto();
  return *default_instance_;
}

Skill* Skill::default_instance_ = NULL;

Skill* Skill::New() const {
  return new Skill;
}

void Skill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    skillvalueid_ = 0;
    if (has_actfile()) {
      if (actfile_ != &::google::protobuf::internal::kEmptyString) {
        actfile_->clear();
      }
    }
    if (has_soundpoint()) {
      if (soundpoint_ != &::google::protobuf::internal::kEmptyString) {
        soundpoint_->clear();
      }
    }
    if (has_damagepoint()) {
      if (damagepoint_ != &::google::protobuf::internal::kEmptyString) {
        damagepoint_->clear();
      }
    }
    if (has_jointpoint()) {
      if (jointpoint_ != &::google::protobuf::internal::kEmptyString) {
        jointpoint_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_beatpoint()) {
      if (beatpoint_ != &::google::protobuf::internal::kEmptyString) {
        beatpoint_->clear();
      }
    }
    if (has_camerapoint()) {
      if (camerapoint_ != &::google::protobuf::internal::kEmptyString) {
        camerapoint_->clear();
      }
    }
    if (has_efffile1()) {
      if (efffile1_ != &::google::protobuf::internal::kEmptyString) {
        efffile1_->clear();
      }
    }
    if (has_effpoint1()) {
      if (effpoint1_ != &::google::protobuf::internal::kEmptyString) {
        effpoint1_->clear();
      }
    }
    if (has_efffile2()) {
      if (efffile2_ != &::google::protobuf::internal::kEmptyString) {
        efffile2_->clear();
      }
    }
    if (has_effpoint2()) {
      if (effpoint2_ != &::google::protobuf::internal::kEmptyString) {
        effpoint2_->clear();
      }
    }
    if (has_efffile3()) {
      if (efffile3_ != &::google::protobuf::internal::kEmptyString) {
        efffile3_->clear();
      }
    }
    if (has_effpoint3()) {
      if (effpoint3_ != &::google::protobuf::internal::kEmptyString) {
        effpoint3_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }

      // optional string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SkillValueID;
        break;
      }

      // optional int32 SkillValueID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillValueID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillvalueid_)));
          set_has_skillvalueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ActFile;
        break;
      }

      // optional string ActFile = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->actfile().data(), this->actfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SoundPoint;
        break;
      }

      // optional string SoundPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SoundPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soundpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->soundpoint().data(), this->soundpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DamagePoint;
        break;
      }

      // optional string DamagePoint = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DamagePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_damagepoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->damagepoint().data(), this->damagepoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_JointPoint;
        break;
      }

      // optional string JointPoint = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_JointPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jointpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->jointpoint().data(), this->jointpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_BeatPoint;
        break;
      }

      // optional string BeatPoint = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BeatPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beatpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beatpoint().data(), this->beatpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_CameraPoint;
        break;
      }

      // optional string CameraPoint = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CameraPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_camerapoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->camerapoint().data(), this->camerapoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_EffFile1;
        break;
      }

      // optional string EffFile1 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffFile1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_efffile1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->efffile1().data(), this->efffile1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_EffPoint1;
        break;
      }

      // optional string EffPoint1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffPoint1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effpoint1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effpoint1().data(), this->effpoint1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_EffFile2;
        break;
      }

      // optional string EffFile2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffFile2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_efffile2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->efffile2().data(), this->efffile2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_EffPoint2;
        break;
      }

      // optional string EffPoint2 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffPoint2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effpoint2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effpoint2().data(), this->effpoint2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_EffFile3;
        break;
      }

      // optional string EffFile3 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffFile3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_efffile3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->efffile3().data(), this->efffile3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_EffPoint3;
        break;
      }

      // optional string EffPoint3 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffPoint3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effpoint3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->effpoint3().data(), this->effpoint3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // optional int32 SkillValueID = 4;
  if (has_skillvalueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->skillvalueid(), output);
  }

  // optional string ActFile = 5;
  if (has_actfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actfile().data(), this->actfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->actfile(), output);
  }

  // optional string SoundPoint = 6;
  if (has_soundpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soundpoint().data(), this->soundpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->soundpoint(), output);
  }

  // optional string DamagePoint = 7;
  if (has_damagepoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damagepoint().data(), this->damagepoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->damagepoint(), output);
  }

  // optional string JointPoint = 8;
  if (has_jointpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jointpoint().data(), this->jointpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->jointpoint(), output);
  }

  // optional string BeatPoint = 9;
  if (has_beatpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beatpoint().data(), this->beatpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->beatpoint(), output);
  }

  // optional string CameraPoint = 10;
  if (has_camerapoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->camerapoint().data(), this->camerapoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->camerapoint(), output);
  }

  // optional string EffFile1 = 11;
  if (has_efffile1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->efffile1().data(), this->efffile1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->efffile1(), output);
  }

  // optional string EffPoint1 = 12;
  if (has_effpoint1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effpoint1().data(), this->effpoint1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->effpoint1(), output);
  }

  // optional string EffFile2 = 13;
  if (has_efffile2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->efffile2().data(), this->efffile2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->efffile2(), output);
  }

  // optional string EffPoint2 = 14;
  if (has_effpoint2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effpoint2().data(), this->effpoint2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->effpoint2(), output);
  }

  // optional string EffFile3 = 15;
  if (has_efffile3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->efffile3().data(), this->efffile3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->efffile3(), output);
  }

  // optional string EffPoint3 = 16;
  if (has_effpoint3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effpoint3().data(), this->effpoint3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->effpoint3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Skill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional int32 SkillValueID = 4;
  if (has_skillvalueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->skillvalueid(), target);
  }

  // optional string ActFile = 5;
  if (has_actfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actfile().data(), this->actfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->actfile(), target);
  }

  // optional string SoundPoint = 6;
  if (has_soundpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->soundpoint().data(), this->soundpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->soundpoint(), target);
  }

  // optional string DamagePoint = 7;
  if (has_damagepoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->damagepoint().data(), this->damagepoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->damagepoint(), target);
  }

  // optional string JointPoint = 8;
  if (has_jointpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->jointpoint().data(), this->jointpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->jointpoint(), target);
  }

  // optional string BeatPoint = 9;
  if (has_beatpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beatpoint().data(), this->beatpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->beatpoint(), target);
  }

  // optional string CameraPoint = 10;
  if (has_camerapoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->camerapoint().data(), this->camerapoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->camerapoint(), target);
  }

  // optional string EffFile1 = 11;
  if (has_efffile1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->efffile1().data(), this->efffile1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->efffile1(), target);
  }

  // optional string EffPoint1 = 12;
  if (has_effpoint1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effpoint1().data(), this->effpoint1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->effpoint1(), target);
  }

  // optional string EffFile2 = 13;
  if (has_efffile2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->efffile2().data(), this->efffile2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->efffile2(), target);
  }

  // optional string EffPoint2 = 14;
  if (has_effpoint2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effpoint2().data(), this->effpoint2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->effpoint2(), target);
  }

  // optional string EffFile3 = 15;
  if (has_efffile3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->efffile3().data(), this->efffile3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->efffile3(), target);
  }

  // optional string EffPoint3 = 16;
  if (has_effpoint3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->effpoint3().data(), this->effpoint3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->effpoint3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Skill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional int32 SkillValueID = 4;
    if (has_skillvalueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillvalueid());
    }

    // optional string ActFile = 5;
    if (has_actfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actfile());
    }

    // optional string SoundPoint = 6;
    if (has_soundpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soundpoint());
    }

    // optional string DamagePoint = 7;
    if (has_damagepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->damagepoint());
    }

    // optional string JointPoint = 8;
    if (has_jointpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jointpoint());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string BeatPoint = 9;
    if (has_beatpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beatpoint());
    }

    // optional string CameraPoint = 10;
    if (has_camerapoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->camerapoint());
    }

    // optional string EffFile1 = 11;
    if (has_efffile1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->efffile1());
    }

    // optional string EffPoint1 = 12;
    if (has_effpoint1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effpoint1());
    }

    // optional string EffFile2 = 13;
    if (has_efffile2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->efffile2());
    }

    // optional string EffPoint2 = 14;
    if (has_effpoint2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effpoint2());
    }

    // optional string EffFile3 = 15;
    if (has_efffile3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->efffile3());
    }

    // optional string EffPoint3 = 16;
    if (has_effpoint3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effpoint3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Skill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Skill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Skill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Skill::MergeFrom(const Skill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_skillvalueid()) {
      set_skillvalueid(from.skillvalueid());
    }
    if (from.has_actfile()) {
      set_actfile(from.actfile());
    }
    if (from.has_soundpoint()) {
      set_soundpoint(from.soundpoint());
    }
    if (from.has_damagepoint()) {
      set_damagepoint(from.damagepoint());
    }
    if (from.has_jointpoint()) {
      set_jointpoint(from.jointpoint());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_beatpoint()) {
      set_beatpoint(from.beatpoint());
    }
    if (from.has_camerapoint()) {
      set_camerapoint(from.camerapoint());
    }
    if (from.has_efffile1()) {
      set_efffile1(from.efffile1());
    }
    if (from.has_effpoint1()) {
      set_effpoint1(from.effpoint1());
    }
    if (from.has_efffile2()) {
      set_efffile2(from.efffile2());
    }
    if (from.has_effpoint2()) {
      set_effpoint2(from.effpoint2());
    }
    if (from.has_efffile3()) {
      set_efffile3(from.efffile3());
    }
    if (from.has_effpoint3()) {
      set_effpoint3(from.effpoint3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Skill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill::CopyFrom(const Skill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill::IsInitialized() const {

  return true;
}

void Skill::Swap(Skill* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(skillvalueid_, other->skillvalueid_);
    std::swap(actfile_, other->actfile_);
    std::swap(soundpoint_, other->soundpoint_);
    std::swap(damagepoint_, other->damagepoint_);
    std::swap(jointpoint_, other->jointpoint_);
    std::swap(beatpoint_, other->beatpoint_);
    std::swap(camerapoint_, other->camerapoint_);
    std::swap(efffile1_, other->efffile1_);
    std::swap(effpoint1_, other->effpoint1_);
    std::swap(efffile2_, other->efffile2_);
    std::swap(effpoint2_, other->effpoint2_);
    std::swap(efffile3_, other->efffile3_);
    std::swap(effpoint3_, other->effpoint3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Skill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Skill_descriptor_;
  metadata.reflection = Skill_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbc

// @@protoc_insertion_point(global_scope)
