// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkillValue.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SkillValue.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dbc {

namespace {

const ::google::protobuf::Descriptor* SkillValueTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillValueTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillValue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SkillValue_2eproto() {
  protobuf_AddDesc_SkillValue_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SkillValue.proto");
  GOOGLE_CHECK(file != NULL);
  SkillValueTable_descriptor_ = file->message_type(0);
  static const int SkillValueTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValueTable, tname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValueTable, tlist_),
  };
  SkillValueTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillValueTable_descriptor_,
      SkillValueTable::default_instance_,
      SkillValueTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValueTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValueTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillValueTable));
  SkillValue_descriptor_ = file->message_type(1);
  static const int SkillValue_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, trigtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, upgradegold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, upgrademat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, matnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, targettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, targetcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, hurttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, damfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, damaddtion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, bufftrigrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, enmityaddtion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, souladdtion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, isbrk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, isfirectrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, flashrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, isverify_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, addproptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, propvalue_),
  };
  SkillValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillValue_descriptor_,
      SkillValue::default_instance_,
      SkillValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillValue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SkillValue_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillValueTable_descriptor_, &SkillValueTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillValue_descriptor_, &SkillValue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SkillValue_2eproto() {
  delete SkillValueTable::default_instance_;
  delete SkillValueTable_reflection_;
  delete SkillValue::default_instance_;
  delete SkillValue_reflection_;
}

void protobuf_AddDesc_SkillValue_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SkillValue.proto\022\003dbc\"@\n\017SkillValueTab"
    "le\022\r\n\005tname\030\001 \001(\t\022\036\n\005tlist\030\002 \003(\0132\017.dbc.S"
    "killValue\"\347\003\n\nSkillValue\022\n\n\002ID\030\001 \001(\005\022\014\n\004"
    "Name\030\002 \001(\t\022\014\n\004Desc\030\003 \001(\t\022\014\n\004Icon\030\004 \001(\t\022\014"
    "\n\004Type\030\005 \001(\005\022\020\n\010TrigType\030\006 \001(\005\022\014\n\004Slot\030\007"
    " \001(\005\022\n\n\002CD\030\010 \001(\002\022\r\n\005Level\030\t \001(\005\022\023\n\013Upgra"
    "deGold\030\n \001(\005\022\022\n\nUpgradeMat\030\013 \001(\005\022\016\n\006MatN"
    "um\030\014 \001(\005\022\022\n\nTargetType\030\r \001(\005\022\021\n\tTargetCn"
    "t\030\016 \001(\005\022\020\n\010HurtType\030\017 \001(\005\022\021\n\tDamFactor\030\020"
    " \001(\002\022\022\n\nDamAddtion\030\021 \001(\002\022\024\n\014BuffTrigRate"
    "\030\022 \001(\002\022\016\n\006BuffID\030\023 \001(\005\022\025\n\rEnmityAddtion\030"
    "\024 \001(\002\022\023\n\013SoulAddtion\030\025 \001(\002\022\r\n\005IsBrk\030\026 \001("
    "\010\022\022\n\nIsFireCtrl\030\027 \001(\010\022\022\n\nFlashRange\030\030 \001("
    "\002\022\020\n\010IsVerify\030\031 \001(\010\022\023\n\013AddPropType\030\032 \001(\005"
    "\022\021\n\tPropValue\030\033 \001(\005", 579);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SkillValue.proto", &protobuf_RegisterTypes);
  SkillValueTable::default_instance_ = new SkillValueTable();
  SkillValue::default_instance_ = new SkillValue();
  SkillValueTable::default_instance_->InitAsDefaultInstance();
  SkillValue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SkillValue_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SkillValue_2eproto {
  StaticDescriptorInitializer_SkillValue_2eproto() {
    protobuf_AddDesc_SkillValue_2eproto();
  }
} static_descriptor_initializer_SkillValue_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SkillValueTable::kTnameFieldNumber;
const int SkillValueTable::kTlistFieldNumber;
#endif  // !_MSC_VER

SkillValueTable::SkillValueTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillValueTable::InitAsDefaultInstance() {
}

SkillValueTable::SkillValueTable(const SkillValueTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillValueTable::SharedCtor() {
  _cached_size_ = 0;
  tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillValueTable::~SkillValueTable() {
  SharedDtor();
}

void SkillValueTable::SharedDtor() {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    delete tname_;
  }
  if (this != default_instance_) {
  }
}

void SkillValueTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillValueTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillValueTable_descriptor_;
}

const SkillValueTable& SkillValueTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillValue_2eproto();
  return *default_instance_;
}

SkillValueTable* SkillValueTable::default_instance_ = NULL;

SkillValueTable* SkillValueTable::New() const {
  return new SkillValueTable;
}

void SkillValueTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tname()) {
      if (tname_ != &::google::protobuf::internal::kEmptyString) {
        tname_->clear();
      }
    }
  }
  tlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillValueTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tname().data(), this->tname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tlist;
        break;
      }

      // repeated .dbc.SkillValue tlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillValueTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tname = 1;
  if (has_tname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tname().data(), this->tname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tname(), output);
  }

  // repeated .dbc.SkillValue tlist = 2;
  for (int i = 0; i < this->tlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillValueTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tname = 1;
  if (has_tname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tname().data(), this->tname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tname(), target);
  }

  // repeated .dbc.SkillValue tlist = 2;
  for (int i = 0; i < this->tlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillValueTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tname = 1;
    if (has_tname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tname());
    }

  }
  // repeated .dbc.SkillValue tlist = 2;
  total_size += 1 * this->tlist_size();
  for (int i = 0; i < this->tlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillValueTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillValueTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillValueTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillValueTable::MergeFrom(const SkillValueTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  tlist_.MergeFrom(from.tlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tname()) {
      set_tname(from.tname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillValueTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillValueTable::CopyFrom(const SkillValueTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillValueTable::IsInitialized() const {

  return true;
}

void SkillValueTable::Swap(SkillValueTable* other) {
  if (other != this) {
    std::swap(tname_, other->tname_);
    tlist_.Swap(&other->tlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillValueTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillValueTable_descriptor_;
  metadata.reflection = SkillValueTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillValue::kIDFieldNumber;
const int SkillValue::kNameFieldNumber;
const int SkillValue::kDescFieldNumber;
const int SkillValue::kIconFieldNumber;
const int SkillValue::kTypeFieldNumber;
const int SkillValue::kTrigTypeFieldNumber;
const int SkillValue::kSlotFieldNumber;
const int SkillValue::kCDFieldNumber;
const int SkillValue::kLevelFieldNumber;
const int SkillValue::kUpgradeGoldFieldNumber;
const int SkillValue::kUpgradeMatFieldNumber;
const int SkillValue::kMatNumFieldNumber;
const int SkillValue::kTargetTypeFieldNumber;
const int SkillValue::kTargetCntFieldNumber;
const int SkillValue::kHurtTypeFieldNumber;
const int SkillValue::kDamFactorFieldNumber;
const int SkillValue::kDamAddtionFieldNumber;
const int SkillValue::kBuffTrigRateFieldNumber;
const int SkillValue::kBuffIDFieldNumber;
const int SkillValue::kEnmityAddtionFieldNumber;
const int SkillValue::kSoulAddtionFieldNumber;
const int SkillValue::kIsBrkFieldNumber;
const int SkillValue::kIsFireCtrlFieldNumber;
const int SkillValue::kFlashRangeFieldNumber;
const int SkillValue::kIsVerifyFieldNumber;
const int SkillValue::kAddPropTypeFieldNumber;
const int SkillValue::kPropValueFieldNumber;
#endif  // !_MSC_VER

SkillValue::SkillValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillValue::InitAsDefaultInstance() {
}

SkillValue::SkillValue(const SkillValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillValue::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  trigtype_ = 0;
  slot_ = 0;
  cd_ = 0;
  level_ = 0;
  upgradegold_ = 0;
  upgrademat_ = 0;
  matnum_ = 0;
  targettype_ = 0;
  targetcnt_ = 0;
  hurttype_ = 0;
  damfactor_ = 0;
  damaddtion_ = 0;
  bufftrigrate_ = 0;
  buffid_ = 0;
  enmityaddtion_ = 0;
  souladdtion_ = 0;
  isbrk_ = false;
  isfirectrl_ = false;
  flashrange_ = 0;
  isverify_ = false;
  addproptype_ = 0;
  propvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillValue::~SkillValue() {
  SharedDtor();
}

void SkillValue::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void SkillValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillValue_descriptor_;
}

const SkillValue& SkillValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SkillValue_2eproto();
  return *default_instance_;
}

SkillValue* SkillValue::default_instance_ = NULL;

SkillValue* SkillValue::New() const {
  return new SkillValue;
}

void SkillValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    type_ = 0;
    trigtype_ = 0;
    slot_ = 0;
    cd_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    upgradegold_ = 0;
    upgrademat_ = 0;
    matnum_ = 0;
    targettype_ = 0;
    targetcnt_ = 0;
    hurttype_ = 0;
    damfactor_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    damaddtion_ = 0;
    bufftrigrate_ = 0;
    buffid_ = 0;
    enmityaddtion_ = 0;
    souladdtion_ = 0;
    isbrk_ = false;
    isfirectrl_ = false;
    flashrange_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    isverify_ = false;
    addproptype_ = 0;
    propvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }

      // optional string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Icon;
        break;
      }

      // optional string Icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Type;
        break;
      }

      // optional int32 Type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TrigType;
        break;
      }

      // optional int32 TrigType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TrigType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigtype_)));
          set_has_trigtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Slot;
        break;
      }

      // optional int32 Slot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_CD;
        break;
      }

      // optional float CD = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Level;
        break;
      }

      // optional int32 Level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_UpgradeGold;
        break;
      }

      // optional int32 UpgradeGold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpgradeGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgradegold_)));
          set_has_upgradegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_UpgradeMat;
        break;
      }

      // optional int32 UpgradeMat = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpgradeMat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upgrademat_)));
          set_has_upgrademat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MatNum;
        break;
      }

      // optional int32 MatNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MatNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matnum_)));
          set_has_matnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_TargetType;
        break;
      }

      // optional int32 TargetType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_TargetCnt;
        break;
      }

      // optional int32 TargetCnt = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetcnt_)));
          set_has_targetcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_HurtType;
        break;
      }

      // optional int32 HurtType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HurtType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hurttype_)));
          set_has_hurttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_DamFactor;
        break;
      }

      // optional float DamFactor = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DamFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damfactor_)));
          set_has_damfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_DamAddtion;
        break;
      }

      // optional float DamAddtion = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_DamAddtion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damaddtion_)));
          set_has_damaddtion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_BuffTrigRate;
        break;
      }

      // optional float BuffTrigRate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_BuffTrigRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bufftrigrate_)));
          set_has_bufftrigrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_BuffID;
        break;
      }

      // optional int32 BuffID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_EnmityAddtion;
        break;
      }

      // optional float EnmityAddtion = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_EnmityAddtion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enmityaddtion_)));
          set_has_enmityaddtion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_SoulAddtion;
        break;
      }

      // optional float SoulAddtion = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_SoulAddtion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &souladdtion_)));
          set_has_souladdtion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_IsBrk;
        break;
      }

      // optional bool IsBrk = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsBrk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbrk_)));
          set_has_isbrk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_IsFireCtrl;
        break;
      }

      // optional bool IsFireCtrl = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFireCtrl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirectrl_)));
          set_has_isfirectrl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_FlashRange;
        break;
      }

      // optional float FlashRange = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_FlashRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flashrange_)));
          set_has_flashrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_IsVerify;
        break;
      }

      // optional bool IsVerify = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsVerify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isverify_)));
          set_has_isverify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_AddPropType;
        break;
      }

      // optional int32 AddPropType = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddPropType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addproptype_)));
          set_has_addproptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_PropValue;
        break;
      }

      // optional int32 PropValue = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PropValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propvalue_)));
          set_has_propvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // optional string Icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->icon(), output);
  }

  // optional int32 Type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 TrigType = 6;
  if (has_trigtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->trigtype(), output);
  }

  // optional int32 Slot = 7;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->slot(), output);
  }

  // optional float CD = 8;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cd(), output);
  }

  // optional int32 Level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional int32 UpgradeGold = 10;
  if (has_upgradegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->upgradegold(), output);
  }

  // optional int32 UpgradeMat = 11;
  if (has_upgrademat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->upgrademat(), output);
  }

  // optional int32 MatNum = 12;
  if (has_matnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->matnum(), output);
  }

  // optional int32 TargetType = 13;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->targettype(), output);
  }

  // optional int32 TargetCnt = 14;
  if (has_targetcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->targetcnt(), output);
  }

  // optional int32 HurtType = 15;
  if (has_hurttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hurttype(), output);
  }

  // optional float DamFactor = 16;
  if (has_damfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->damfactor(), output);
  }

  // optional float DamAddtion = 17;
  if (has_damaddtion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->damaddtion(), output);
  }

  // optional float BuffTrigRate = 18;
  if (has_bufftrigrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->bufftrigrate(), output);
  }

  // optional int32 BuffID = 19;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->buffid(), output);
  }

  // optional float EnmityAddtion = 20;
  if (has_enmityaddtion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->enmityaddtion(), output);
  }

  // optional float SoulAddtion = 21;
  if (has_souladdtion()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->souladdtion(), output);
  }

  // optional bool IsBrk = 22;
  if (has_isbrk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isbrk(), output);
  }

  // optional bool IsFireCtrl = 23;
  if (has_isfirectrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->isfirectrl(), output);
  }

  // optional float FlashRange = 24;
  if (has_flashrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->flashrange(), output);
  }

  // optional bool IsVerify = 25;
  if (has_isverify()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->isverify(), output);
  }

  // optional int32 AddPropType = 26;
  if (has_addproptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->addproptype(), output);
  }

  // optional int32 PropValue = 27;
  if (has_propvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->propvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional string Icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->icon(), target);
  }

  // optional int32 Type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 TrigType = 6;
  if (has_trigtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->trigtype(), target);
  }

  // optional int32 Slot = 7;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->slot(), target);
  }

  // optional float CD = 8;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cd(), target);
  }

  // optional int32 Level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional int32 UpgradeGold = 10;
  if (has_upgradegold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->upgradegold(), target);
  }

  // optional int32 UpgradeMat = 11;
  if (has_upgrademat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->upgrademat(), target);
  }

  // optional int32 MatNum = 12;
  if (has_matnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->matnum(), target);
  }

  // optional int32 TargetType = 13;
  if (has_targettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->targettype(), target);
  }

  // optional int32 TargetCnt = 14;
  if (has_targetcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->targetcnt(), target);
  }

  // optional int32 HurtType = 15;
  if (has_hurttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hurttype(), target);
  }

  // optional float DamFactor = 16;
  if (has_damfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->damfactor(), target);
  }

  // optional float DamAddtion = 17;
  if (has_damaddtion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->damaddtion(), target);
  }

  // optional float BuffTrigRate = 18;
  if (has_bufftrigrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->bufftrigrate(), target);
  }

  // optional int32 BuffID = 19;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->buffid(), target);
  }

  // optional float EnmityAddtion = 20;
  if (has_enmityaddtion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->enmityaddtion(), target);
  }

  // optional float SoulAddtion = 21;
  if (has_souladdtion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->souladdtion(), target);
  }

  // optional bool IsBrk = 22;
  if (has_isbrk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isbrk(), target);
  }

  // optional bool IsFireCtrl = 23;
  if (has_isfirectrl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->isfirectrl(), target);
  }

  // optional float FlashRange = 24;
  if (has_flashrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->flashrange(), target);
  }

  // optional bool IsVerify = 25;
  if (has_isverify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->isverify(), target);
  }

  // optional int32 AddPropType = 26;
  if (has_addproptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->addproptype(), target);
  }

  // optional int32 PropValue = 27;
  if (has_propvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->propvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string Icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int32 Type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 TrigType = 6;
    if (has_trigtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trigtype());
    }

    // optional int32 Slot = 7;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional float CD = 8;
    if (has_cd()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 UpgradeGold = 10;
    if (has_upgradegold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgradegold());
    }

    // optional int32 UpgradeMat = 11;
    if (has_upgrademat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upgrademat());
    }

    // optional int32 MatNum = 12;
    if (has_matnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matnum());
    }

    // optional int32 TargetType = 13;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targettype());
    }

    // optional int32 TargetCnt = 14;
    if (has_targetcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetcnt());
    }

    // optional int32 HurtType = 15;
    if (has_hurttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hurttype());
    }

    // optional float DamFactor = 16;
    if (has_damfactor()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float DamAddtion = 17;
    if (has_damaddtion()) {
      total_size += 2 + 4;
    }

    // optional float BuffTrigRate = 18;
    if (has_bufftrigrate()) {
      total_size += 2 + 4;
    }

    // optional int32 BuffID = 19;
    if (has_buffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional float EnmityAddtion = 20;
    if (has_enmityaddtion()) {
      total_size += 2 + 4;
    }

    // optional float SoulAddtion = 21;
    if (has_souladdtion()) {
      total_size += 2 + 4;
    }

    // optional bool IsBrk = 22;
    if (has_isbrk()) {
      total_size += 2 + 1;
    }

    // optional bool IsFireCtrl = 23;
    if (has_isfirectrl()) {
      total_size += 2 + 1;
    }

    // optional float FlashRange = 24;
    if (has_flashrange()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool IsVerify = 25;
    if (has_isverify()) {
      total_size += 2 + 1;
    }

    // optional int32 AddPropType = 26;
    if (has_addproptype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addproptype());
    }

    // optional int32 PropValue = 27;
    if (has_propvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillValue::MergeFrom(const SkillValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_trigtype()) {
      set_trigtype(from.trigtype());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_upgradegold()) {
      set_upgradegold(from.upgradegold());
    }
    if (from.has_upgrademat()) {
      set_upgrademat(from.upgrademat());
    }
    if (from.has_matnum()) {
      set_matnum(from.matnum());
    }
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_targetcnt()) {
      set_targetcnt(from.targetcnt());
    }
    if (from.has_hurttype()) {
      set_hurttype(from.hurttype());
    }
    if (from.has_damfactor()) {
      set_damfactor(from.damfactor());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_damaddtion()) {
      set_damaddtion(from.damaddtion());
    }
    if (from.has_bufftrigrate()) {
      set_bufftrigrate(from.bufftrigrate());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_enmityaddtion()) {
      set_enmityaddtion(from.enmityaddtion());
    }
    if (from.has_souladdtion()) {
      set_souladdtion(from.souladdtion());
    }
    if (from.has_isbrk()) {
      set_isbrk(from.isbrk());
    }
    if (from.has_isfirectrl()) {
      set_isfirectrl(from.isfirectrl());
    }
    if (from.has_flashrange()) {
      set_flashrange(from.flashrange());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_isverify()) {
      set_isverify(from.isverify());
    }
    if (from.has_addproptype()) {
      set_addproptype(from.addproptype());
    }
    if (from.has_propvalue()) {
      set_propvalue(from.propvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillValue::CopyFrom(const SkillValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillValue::IsInitialized() const {

  return true;
}

void SkillValue::Swap(SkillValue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(icon_, other->icon_);
    std::swap(type_, other->type_);
    std::swap(trigtype_, other->trigtype_);
    std::swap(slot_, other->slot_);
    std::swap(cd_, other->cd_);
    std::swap(level_, other->level_);
    std::swap(upgradegold_, other->upgradegold_);
    std::swap(upgrademat_, other->upgrademat_);
    std::swap(matnum_, other->matnum_);
    std::swap(targettype_, other->targettype_);
    std::swap(targetcnt_, other->targetcnt_);
    std::swap(hurttype_, other->hurttype_);
    std::swap(damfactor_, other->damfactor_);
    std::swap(damaddtion_, other->damaddtion_);
    std::swap(bufftrigrate_, other->bufftrigrate_);
    std::swap(buffid_, other->buffid_);
    std::swap(enmityaddtion_, other->enmityaddtion_);
    std::swap(souladdtion_, other->souladdtion_);
    std::swap(isbrk_, other->isbrk_);
    std::swap(isfirectrl_, other->isfirectrl_);
    std::swap(flashrange_, other->flashrange_);
    std::swap(isverify_, other->isverify_);
    std::swap(addproptype_, other->addproptype_);
    std::swap(propvalue_, other->propvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillValue_descriptor_;
  metadata.reflection = SkillValue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbc

// @@protoc_insertion_point(global_scope)
