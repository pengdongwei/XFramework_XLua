// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SoundData.proto

#ifndef PROTOBUF_SoundData_2eproto__INCLUDED
#define PROTOBUF_SoundData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dbc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SoundData_2eproto();
void protobuf_AssignDesc_SoundData_2eproto();
void protobuf_ShutdownFile_SoundData_2eproto();

class SoundDataTable;
class SoundData;

// ===================================================================

class SoundDataTable : public ::google::protobuf::Message {
 public:
  SoundDataTable();
  virtual ~SoundDataTable();

  SoundDataTable(const SoundDataTable& from);

  inline SoundDataTable& operator=(const SoundDataTable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoundDataTable& default_instance();

  void Swap(SoundDataTable* other);

  // implements Message ----------------------------------------------

  SoundDataTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoundDataTable& from);
  void MergeFrom(const SoundDataTable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tname = 1;
  inline bool has_tname() const;
  inline void clear_tname();
  static const int kTnameFieldNumber = 1;
  inline const ::std::string& tname() const;
  inline void set_tname(const ::std::string& value);
  inline void set_tname(const char* value);
  inline void set_tname(const char* value, size_t size);
  inline ::std::string* mutable_tname();
  inline ::std::string* release_tname();
  inline void set_allocated_tname(::std::string* tname);

  // repeated .dbc.SoundData tlist = 2;
  inline int tlist_size() const;
  inline void clear_tlist();
  static const int kTlistFieldNumber = 2;
  inline const ::dbc::SoundData& tlist(int index) const;
  inline ::dbc::SoundData* mutable_tlist(int index);
  inline ::dbc::SoundData* add_tlist();
  inline const ::google::protobuf::RepeatedPtrField< ::dbc::SoundData >&
      tlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::dbc::SoundData >*
      mutable_tlist();

  // @@protoc_insertion_point(class_scope:dbc.SoundDataTable)
 private:
  inline void set_has_tname();
  inline void clear_has_tname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* tname_;
  ::google::protobuf::RepeatedPtrField< ::dbc::SoundData > tlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SoundData_2eproto();
  friend void protobuf_AssignDesc_SoundData_2eproto();
  friend void protobuf_ShutdownFile_SoundData_2eproto();

  void InitAsDefaultInstance();
  static SoundDataTable* default_instance_;
};
// -------------------------------------------------------------------

class SoundData : public ::google::protobuf::Message {
 public:
  SoundData();
  virtual ~SoundData();

  SoundData(const SoundData& from);

  inline SoundData& operator=(const SoundData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SoundData& default_instance();

  void Swap(SoundData* other);

  // implements Message ----------------------------------------------

  SoundData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SoundData& from);
  void MergeFrom(const SoundData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string Desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional string path = 3;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:dbc.SoundData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* desc_;
  ::std::string* path_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SoundData_2eproto();
  friend void protobuf_AssignDesc_SoundData_2eproto();
  friend void protobuf_ShutdownFile_SoundData_2eproto();

  void InitAsDefaultInstance();
  static SoundData* default_instance_;
};
// ===================================================================


// ===================================================================

// SoundDataTable

// optional string tname = 1;
inline bool SoundDataTable::has_tname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoundDataTable::set_has_tname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoundDataTable::clear_has_tname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoundDataTable::clear_tname() {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    tname_->clear();
  }
  clear_has_tname();
}
inline const ::std::string& SoundDataTable::tname() const {
  return *tname_;
}
inline void SoundDataTable::set_tname(const ::std::string& value) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(value);
}
inline void SoundDataTable::set_tname(const char* value) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(value);
}
inline void SoundDataTable::set_tname(const char* value, size_t size) {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  tname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SoundDataTable::mutable_tname() {
  set_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    tname_ = new ::std::string;
  }
  return tname_;
}
inline ::std::string* SoundDataTable::release_tname() {
  clear_has_tname();
  if (tname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tname_;
    tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SoundDataTable::set_allocated_tname(::std::string* tname) {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    delete tname_;
  }
  if (tname) {
    set_has_tname();
    tname_ = tname;
  } else {
    clear_has_tname();
    tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .dbc.SoundData tlist = 2;
inline int SoundDataTable::tlist_size() const {
  return tlist_.size();
}
inline void SoundDataTable::clear_tlist() {
  tlist_.Clear();
}
inline const ::dbc::SoundData& SoundDataTable::tlist(int index) const {
  return tlist_.Get(index);
}
inline ::dbc::SoundData* SoundDataTable::mutable_tlist(int index) {
  return tlist_.Mutable(index);
}
inline ::dbc::SoundData* SoundDataTable::add_tlist() {
  return tlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dbc::SoundData >&
SoundDataTable::tlist() const {
  return tlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::dbc::SoundData >*
SoundDataTable::mutable_tlist() {
  return &tlist_;
}

// -------------------------------------------------------------------

// SoundData

// optional int32 ID = 1;
inline bool SoundData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SoundData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SoundData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SoundData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SoundData::id() const {
  return id_;
}
inline void SoundData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string Desc = 2;
inline bool SoundData::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SoundData::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SoundData::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SoundData::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& SoundData::desc() const {
  return *desc_;
}
inline void SoundData::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void SoundData::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void SoundData::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SoundData::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* SoundData::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SoundData::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string path = 3;
inline bool SoundData::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SoundData::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SoundData::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SoundData::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& SoundData::path() const {
  return *path_;
}
inline void SoundData::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void SoundData::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void SoundData::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SoundData::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* SoundData::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SoundData::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SoundData_2eproto__INCLUDED
