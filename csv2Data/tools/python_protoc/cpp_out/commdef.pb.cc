// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commdef.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commdef.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace commdef {

namespace {

const ::google::protobuf::EnumDescriptor* SexType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LeaderboardType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillTrigType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillTargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillSlot_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Rules_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_commdef_2eproto() {
  protobuf_AddDesc_commdef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commdef.proto");
  GOOGLE_CHECK(file != NULL);
  SexType_descriptor_ = file->enum_type(0);
  LeaderboardType_descriptor_ = file->enum_type(1);
  SkillTrigType_descriptor_ = file->enum_type(2);
  SkillType_descriptor_ = file->enum_type(3);
  SkillTargetType_descriptor_ = file->enum_type(4);
  SkillSlot_descriptor_ = file->enum_type(5);
  Rules_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commdef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_commdef_2eproto() {
}

void protobuf_AddDesc_commdef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcommdef.proto\022\007commdef*\037\n\007SexType\022\n\n\006f"
    "emale\020\000\022\010\n\004male\020\001*E\n\017LeaderboardType\022\016\n\n"
    "none_board\020\000\022\020\n\014battle_power\020\001\022\020\n\014region"
    "_level\020\002*%\n\rSkillTrigType\022\010\n\004buff\020\000\022\n\n\006d"
    "ebuff\020\001*l\n\tSkillType\022\010\n\004none\020\000\022\t\n\005sword\020"
    "\001\022\010\n\004fist\020\002\022\t\n\005knife\020\003\022\n\n\006talent\020\n\022\007\n\003pe"
    "t\020\013\022\007\n\003QTE\020\014\022\013\n\007zhengwu\020\r\022\n\n\006moster\020\016*;\n"
    "\017SkillTargetType\022\t\n\005enemy\020\000\022\010\n\004self\020\001\022\023\n"
    "\017selfAndTeammate\020\002*[\n\tSkillSlot\022\r\n\tnoram"
    "lAtk\020\000\022\n\n\006skill1\020\001\022\n\n\006skill2\020\002\022\n\n\006skill3"
    "\020\003\022\n\n\006weapon\020\004\022\017\n\013zhengwuslot\020\005*<\n\005Rules"
    "\022\032\n\026Limitation_PlayerLevel\020\000\022\027\n\023Limitati"
    "on_ColdDown\020\001", 493);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commdef.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commdef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commdef_2eproto {
  StaticDescriptorInitializer_commdef_2eproto() {
    protobuf_AddDesc_commdef_2eproto();
  }
} static_descriptor_initializer_commdef_2eproto_;
const ::google::protobuf::EnumDescriptor* SexType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SexType_descriptor_;
}
bool SexType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LeaderboardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderboardType_descriptor_;
}
bool LeaderboardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillTrigType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTrigType_descriptor_;
}
bool SkillTrigType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillType_descriptor_;
}
bool SkillType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillTargetType_descriptor_;
}
bool SkillTargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillSlot_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillSlot_descriptor_;
}
bool SkillSlot_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Rules_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rules_descriptor_;
}
bool Rules_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace commdef

// @@protoc_insertion_point(global_scope)
