// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StateMachine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StateMachine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dbc {

namespace {

const ::google::protobuf::Descriptor* StateMachineTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachineTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateMachine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_StateMachine_2eproto() {
  protobuf_AddDesc_StateMachine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "StateMachine.proto");
  GOOGLE_CHECK(file != NULL);
  StateMachineTable_descriptor_ = file->message_type(0);
  static const int StateMachineTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineTable, tname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineTable, tlist_),
  };
  StateMachineTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachineTable_descriptor_,
      StateMachineTable::default_instance_,
      StateMachineTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachineTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachineTable));
  StateMachine_descriptor_ = file->message_type(1);
  static const int StateMachine_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, preskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, skin_),
  };
  StateMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateMachine_descriptor_,
      StateMachine::default_instance_,
      StateMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateMachine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_StateMachine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachineTable_descriptor_, &StateMachineTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateMachine_descriptor_, &StateMachine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_StateMachine_2eproto() {
  delete StateMachineTable::default_instance_;
  delete StateMachineTable_reflection_;
  delete StateMachine::default_instance_;
  delete StateMachine_reflection_;
}

void protobuf_AddDesc_StateMachine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022StateMachine.proto\022\003dbc\"D\n\021StateMachin"
    "eTable\022\r\n\005tname\030\001 \001(\t\022 \n\005tlist\030\002 \003(\0132\021.d"
    "bc.StateMachine\"z\n\014StateMachine\022\n\n\002ID\030\001 "
    "\001(\005\022\014\n\004Name\030\002 \001(\t\022\014\n\004Desc\030\003 \001(\t\022\r\n\005Skill"
    "\030\004 \001(\t\022\020\n\010PreSkill\030\005 \001(\t\022\023\n\013EquipmentId\030"
    "\006 \001(\005\022\014\n\004Skin\030\007 \001(\t", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "StateMachine.proto", &protobuf_RegisterTypes);
  StateMachineTable::default_instance_ = new StateMachineTable();
  StateMachine::default_instance_ = new StateMachine();
  StateMachineTable::default_instance_->InitAsDefaultInstance();
  StateMachine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StateMachine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StateMachine_2eproto {
  StaticDescriptorInitializer_StateMachine_2eproto() {
    protobuf_AddDesc_StateMachine_2eproto();
  }
} static_descriptor_initializer_StateMachine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int StateMachineTable::kTnameFieldNumber;
const int StateMachineTable::kTlistFieldNumber;
#endif  // !_MSC_VER

StateMachineTable::StateMachineTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateMachineTable::InitAsDefaultInstance() {
}

StateMachineTable::StateMachineTable(const StateMachineTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateMachineTable::SharedCtor() {
  _cached_size_ = 0;
  tname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachineTable::~StateMachineTable() {
  SharedDtor();
}

void StateMachineTable::SharedDtor() {
  if (tname_ != &::google::protobuf::internal::kEmptyString) {
    delete tname_;
  }
  if (this != default_instance_) {
  }
}

void StateMachineTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachineTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachineTable_descriptor_;
}

const StateMachineTable& StateMachineTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateMachine_2eproto();
  return *default_instance_;
}

StateMachineTable* StateMachineTable::default_instance_ = NULL;

StateMachineTable* StateMachineTable::New() const {
  return new StateMachineTable;
}

void StateMachineTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tname()) {
      if (tname_ != &::google::protobuf::internal::kEmptyString) {
        tname_->clear();
      }
    }
  }
  tlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachineTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tname().data(), this->tname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tlist;
        break;
      }

      // repeated .dbc.StateMachine tlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateMachineTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tname = 1;
  if (has_tname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tname().data(), this->tname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tname(), output);
  }

  // repeated .dbc.StateMachine tlist = 2;
  for (int i = 0; i < this->tlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateMachineTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tname = 1;
  if (has_tname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tname().data(), this->tname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tname(), target);
  }

  // repeated .dbc.StateMachine tlist = 2;
  for (int i = 0; i < this->tlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateMachineTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tname = 1;
    if (has_tname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tname());
    }

  }
  // repeated .dbc.StateMachine tlist = 2;
  total_size += 1 * this->tlist_size();
  for (int i = 0; i < this->tlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachineTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachineTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachineTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachineTable::MergeFrom(const StateMachineTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  tlist_.MergeFrom(from.tlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tname()) {
      set_tname(from.tname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachineTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachineTable::CopyFrom(const StateMachineTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachineTable::IsInitialized() const {

  return true;
}

void StateMachineTable::Swap(StateMachineTable* other) {
  if (other != this) {
    std::swap(tname_, other->tname_);
    tlist_.Swap(&other->tlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachineTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachineTable_descriptor_;
  metadata.reflection = StateMachineTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateMachine::kIDFieldNumber;
const int StateMachine::kNameFieldNumber;
const int StateMachine::kDescFieldNumber;
const int StateMachine::kSkillFieldNumber;
const int StateMachine::kPreSkillFieldNumber;
const int StateMachine::kEquipmentIdFieldNumber;
const int StateMachine::kSkinFieldNumber;
#endif  // !_MSC_VER

StateMachine::StateMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StateMachine::InitAsDefaultInstance() {
}

StateMachine::StateMachine(const StateMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StateMachine::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  preskill_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equipmentid_ = 0;
  skin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateMachine::~StateMachine() {
  SharedDtor();
}

void StateMachine::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (skill_ != &::google::protobuf::internal::kEmptyString) {
    delete skill_;
  }
  if (preskill_ != &::google::protobuf::internal::kEmptyString) {
    delete preskill_;
  }
  if (skin_ != &::google::protobuf::internal::kEmptyString) {
    delete skin_;
  }
  if (this != default_instance_) {
  }
}

void StateMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateMachine_descriptor_;
}

const StateMachine& StateMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_StateMachine_2eproto();
  return *default_instance_;
}

StateMachine* StateMachine::default_instance_ = NULL;

StateMachine* StateMachine::New() const {
  return new StateMachine;
}

void StateMachine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_skill()) {
      if (skill_ != &::google::protobuf::internal::kEmptyString) {
        skill_->clear();
      }
    }
    if (has_preskill()) {
      if (preskill_ != &::google::protobuf::internal::kEmptyString) {
        preskill_->clear();
      }
    }
    equipmentid_ = 0;
    if (has_skin()) {
      if (skin_ != &::google::protobuf::internal::kEmptyString) {
        skin_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // optional string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }

      // optional string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Skill;
        break;
      }

      // optional string Skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skill().data(), this->skill().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PreSkill;
        break;
      }

      // optional string PreSkill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PreSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_preskill()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->preskill().data(), this->preskill().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_EquipmentId;
        break;
      }

      // optional int32 EquipmentId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equipmentid_)));
          set_has_equipmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Skin;
        break;
      }

      // optional string Skin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Skin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->skin().data(), this->skin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StateMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // optional string Skill = 4;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill().data(), this->skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->skill(), output);
  }

  // optional string PreSkill = 5;
  if (has_preskill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preskill().data(), this->preskill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->preskill(), output);
  }

  // optional int32 EquipmentId = 6;
  if (has_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->equipmentid(), output);
  }

  // optional string Skin = 7;
  if (has_skin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skin().data(), this->skin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->skin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StateMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional string Skill = 4;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skill().data(), this->skill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->skill(), target);
  }

  // optional string PreSkill = 5;
  if (has_preskill()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->preskill().data(), this->preskill().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->preskill(), target);
  }

  // optional int32 EquipmentId = 6;
  if (has_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->equipmentid(), target);
  }

  // optional string Skin = 7;
  if (has_skin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->skin().data(), this->skin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->skin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StateMachine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string Skill = 4;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skill());
    }

    // optional string PreSkill = 5;
    if (has_preskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->preskill());
    }

    // optional int32 EquipmentId = 6;
    if (has_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equipmentid());
    }

    // optional string Skin = 7;
    if (has_skin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateMachine::MergeFrom(const StateMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_skill()) {
      set_skill(from.skill());
    }
    if (from.has_preskill()) {
      set_preskill(from.preskill());
    }
    if (from.has_equipmentid()) {
      set_equipmentid(from.equipmentid());
    }
    if (from.has_skin()) {
      set_skin(from.skin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateMachine::CopyFrom(const StateMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateMachine::IsInitialized() const {

  return true;
}

void StateMachine::Swap(StateMachine* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(skill_, other->skill_);
    std::swap(preskill_, other->preskill_);
    std::swap(equipmentid_, other->equipmentid_);
    std::swap(skin_, other->skin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateMachine_descriptor_;
  metadata.reflection = StateMachine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dbc

// @@protoc_insertion_point(global_scope)
